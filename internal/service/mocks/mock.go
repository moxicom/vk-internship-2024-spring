// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/moxicom/vk-internship-2024-spring/internal/models"
)

// MockActors is a mock of Actors interface.
type MockActors struct {
	ctrl     *gomock.Controller
	recorder *MockActorsMockRecorder
}

// MockActorsMockRecorder is the mock recorder for MockActors.
type MockActorsMockRecorder struct {
	mock *MockActors
}

// NewMockActors creates a new mock instance.
func NewMockActors(ctrl *gomock.Controller) *MockActors {
	mock := &MockActors{ctrl: ctrl}
	mock.recorder = &MockActorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActors) EXPECT() *MockActorsMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActors) AddActor(arg0 models.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorsMockRecorder) AddActor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActors)(nil).AddActor), arg0)
}

// DeleteActor mocks base method.
func (m *MockActors) DeleteActor(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorsMockRecorder) DeleteActor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActors)(nil).DeleteActor), arg0)
}

// GetActor mocks base method.
func (m *MockActors) GetActor(arg0 int) (models.ActorFilm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", arg0)
	ret0, _ := ret[0].(models.ActorFilm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorsMockRecorder) GetActor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActors)(nil).GetActor), arg0)
}

// GetActors mocks base method.
func (m *MockActors) GetActors() ([]models.ActorFilm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]models.ActorFilm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorsMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActors)(nil).GetActors))
}

// UpdateActor mocks base method.
func (m *MockActors) UpdateActor(arg0 int, arg1 models.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorsMockRecorder) UpdateActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActors)(nil).UpdateActor), arg0, arg1)
}
